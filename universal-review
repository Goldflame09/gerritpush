#!/bin/bash

###################################################################
#                                                                 #
# Created by Sniper/Goldflame09/wedgess/Papa Smurf151/Soupmagnet  #
#                                                                 #
###################################################################

VERSION=1.0
BUILD=1

GPDIR="${HOME}/.gerritpush"

ARRY=${GPDIR}/projects
TEAM=($(awk '{print $1}' RS="" $ARRY))
GTEAM=($(awk '{print $2}' RS="" $ARRY))
URL=($(awk '{print $3}' RS="" $ARRY))

red=$(tput setaf 1) # red
grn=$(tput setaf 2) # green
ylw=$(tput setaf 3) # yellow
blu=$(tput setaf 4) # blue
ppl=$(tput setaf 5) # purple
cya=$(tput setaf 6) # cyan
txtbld=$(tput bold) # Bold
bldred=${txtbld}$(tput setaf 1) # red
bldgrn=${txtbld}$(tput setaf 2) # green
bldylw=${txtbld}$(tput setaf 3) # yellow
bldblu=${txtbld}$(tput setaf 4) # blue
bldppl=${txtbld}$(tput setaf 5) # purple
bldcya=${txtbld}$(tput setaf 6) # cyan
txtrst=$(tput sgr0) # Reset
rev=$(tput rev) # Reverse color
pplrev=${rev}$(tput setaf 5)
cyarev=${rev}$(tput setaf 6)
ylwrev=${rev}$(tput setaf 3)
blurev=${rev}$(tput setaf 4)

write_config() {
    echo "safety=1" >> ${GPDIR}/config
    echo "username=not_set" >> ${GPDIR}/config
    echo "teamCHOICE=none" >> ${GPDIR}/config
    echo "gerritTEAM=:" >> ${GPDIR}/config
    echo "gerritURL=;" >> ${GPDIR}/config
}

do_checks(){
    [[ ! -d ${GPDIR} ]] && mkdir -p ${GPDIR} && sleep .5
    [[ ! -f ${GPDIR}/config ]] && write_config
    [[ ! -f ${ARRY} ]] && curl http://pac-rom.com/downloads/projects > ${ARRY}
	ARRY=${GPDIR}/projects
	TEAM=($(awk '{print $1}' RS="" $ARRY))
	GTEAM=($(awk '{print $2}' RS="" $ARRY))
	URL=($(awk '{print $3}' RS="" $ARRY))
    safety=$(get safety)
}

get(){
    grep $1 ${GPDIR}/config | cut -d "=" -f2
}

save(){
    x=$(get $1)
    sed -i "s#$x#$2#" ${GPDIR}/config
}

user(){
    clear; [[ "$(get username)" == "not_set" ]] && set_up_user || GUZER=$(get username)
}

set_up_user(){
    do_checks
    if [ "$(get username)" != "not_set" ]; then    
        GUZER=$(get username)
        echo ""
        echo "###################################################################"
        echo ""
        echo ${bldcya}"Your UserName is set to: ${GUZER}"${txtrst}
        echo ""
        echo "###################################################################"
        echo ""
      else
        clear
        read -p "Please enter your Gerrit UserName: " GUZER; clear
        if [ ${safety} -eq "1" ]; then
            while true; do
                read -p "Your entered ${GUZER}. Is this correct? (Yes/No) " correct1
                case ${correct1} in
                    Y*|y*|"") clear; save username ${GUZER}; clear;
                              echo "Your new gerrit username is: ${GUZER}"; break ;;
                       N*|n*) clear; read -p "Re-Enter Gerrit UserName: " GUZER
                              save username ${GUZER}; clear
                              echo "Your new gerrit username is: ${GUZER}"; break ;;
                           *) clear; echo "Invalid Entry \"${correct1}\", Please enter y/yes or n/no";;
                esac
            done
          else
            save username ${GUZER};
            clear;
        fi
    fi
}

team() {
    if [ "$(get teamCHOICE)" !=  "none" ]; then
        TEAM=$(get teamCHOICE)
        GTEAM=$(get gerritTEAM)
        GURL=$(get gerritURL)
      else
        new_team
    fi
}

new_team() {
    do_checks
    if [ "$(get teamCHOICE)" == "none" ]; then
        DisplayTeam=$(get teamCHOICE)
        echo ""
        echo "###################################################################"
        echo ""
        echo ${bldcya}"Your gerrit team is set to: ${DisplayTeam}"${txtrst}
        echo ""
        echo "###################################################################"
        echo ""
    fi

    echo "Please Select your new Gerrit Team:"
    echo ""
    max=$(echo ${#TEAM[@]})
    for (( i=0; i<${max}; i++ )); do
        (( h = $i + 1 ))
        echo "$h) ${bldcya}${TEAM[$i]}${txtrst}"
    done
    echo ""
    while true; do
        read -p "Enter the Corresponding Number: " NUMBER
        if [ ${NUMBER} -le $max ] && [ ${NUMBER} -ne 0 ]; then
            case ${NUMBER} in
                *) (( i = ${NUMBER} - 1 )); break ;;
            esac
        else
            echo "\"${NUMBER}\" is not a valid selection"
        fi 2>/dev/null
    done
    
    save teamCHOICE ${TEAM[$i]}
    save gerritTEAM ${GTEAM[$i]}
    save gerritURL ${URL[$i]}

    sleep 1; clear;
    echo "Default Set to ${bldcya}${TEAM[i]}${txtrst}"; echo
}

correct_commit() {
    clear
    while true; do
        echo ${MSSG}; echo
        read -p "Is this correct ??" correct2
        case ${correct2} in
            *|y*|"") echo "Commit set to ${bldcya}${MSSG}${txtrst}"; break ;;
              N*|n*) read -p "Re-enter commit message" MSSG ;;
                  *) clear; echo "Invalid Entry \"${correct2}\". Please enter y/yes or n/no" ;;
        esac
    done
}

push_stuff(){
    GUZER=$(get username)
    GTEAM=$(get gerritTEAM)
    GURL=$(get gerritURL)
    BRANCH=$(git branch | sed -n '/\* /s///p')
    PROJECT=$(grep "projectname" .git/config | awk -F "projectname = " '{print $2}' | sed -e 's/^[ \t]*//' )
    [[ -z ${PROJECT} ]] && PROJECT=$(grep "url" .git/config | awk -F "url = " '{print $2}' | rev | cut -d/ -f1 | rev | cut -d. -f1)
    git push ssh://${GUZER}@${GTEAM}${GURL}${PROJECT} HEAD:refs/\for/${BRANCH}
}

push() {
    do_checks
    if [ ${safety} -eq "1" ]; then
        while true; do
            read -p "Are you sure you want to push? (Y/n): " RESP
            case ${RESP} in
                Y*|y*|"") push_stuff; break ;;
                       *) echo "Canceled"; break ;;
            esac
        done
      else
        push_stuff
    fi
}

ap() {
    do_checks
    git add -A
    scp -p -P 29418 ${GUZER}@${GTEAM}:hooks/commit-msg .git/hooks/
    echo "Add commit message below."
    echo "--------------------------"
    read MSSG
    [[ ${safety} -eq "1" ]] && correct_commit
    git commit -a -m "${MSSG}"
    push
}

ag() {
    while true; do
        echo "Enter the name of a new team to be added (PAC, CyanogenMod, etc.): "; read TNAME
        [[ $(grep -i ${TNAME} ${ARRY} | wc -l) -gt 0 ]] && echo "${TNAME} is already on the list" && sleep 3 && error && break
        echo "Enter the gerrit address (review.pac-rom.com, review.cyanogenmod.org, etc.)"; read TADDY
        echo "Enter the name of the team's gerrit root directory (i.e. /, /Cyanogenmod, etc. )"; read TROOT
        echo ""
        echo "You entered the following:"
        echo ""
        echo \"${TNAME}\"; echo \"${TADDY}\"; echo \"${TROOT}\"
        echo ""
        echo "Is this information correct?"
        read -p "(**Note - Entering incorrect information can/will cause problems): " answer
        case ${answer} in
            Y*|y*|"") echo "\"${TNAME}\"" >> ${ARRY}
                      echo "\"${TADDY}\"" >> ${ARRY}
                      echo -e "\":29418${TROOT}/\"\n" >> ${ARRY}; break ;;
               N*|n*) : ;;
        esac
    done
}

amend() {
    while true; do
        read -p "Have you edited the files?/Do you want to change commit message? (Y/n): " RESPa
        case ${RESPa} in
            Y*|y*|"") git add -A; git commit --amend; push; break ;;
               N*|n*) echo "Please edit them and press [ENTER] when finished,"
                      read -p "or press \"0\" to quit and come back later: "; answer
                      case $answer in
                          "") : ;;
                           0) break ;;
                      esac ;;
        esac
    done
}

author() {
    echo "Please enter username of author"
    read -p "Username: " auser
    git commit --amend --author ${auser}
}

correct_gname() {
    do_checks
    while true; do
        read -p "Your entered ${bldcya}${GUZER}${txtrst}, is this correct? " correct1
        case ${correct1} in
            Y*|y*|"") save username ${GUZER};
                      echo "Your new gerrit username is: ${GUZER}"; break ;;
               N*|n*) read -p "Re-Enter Gerrit UserName: " GUZER;
                      save username ${GUZER}; echo "Your new gerrit username is: ${GUZER}"; break ;;
                   *) clear; echo "Invalid Entry ${correct1}. Please enter y/yes or n/no" ;;
        esac
    done
}

nameq_question() {
    echo "Enter an option:"
    select NAME in "View your current gerrit username" "Enter a New gerrit username"; do
        case ${NAME} in
            *View*) GUZER=$(get username) \
                      && echo "Your current gerrit username is: ${bldcya}${GUZER}${txtrst}" \
                      || echo "No gerrit username found.."; break ;;
             *New*) read -p "Enter your new gerrit username: " GUZER;
                    [[ ${safety} -eq "1" ]] && correct_gname; break ;;
                * ) echo "That is not a valid option (Choose 1 or 2)";
        esac
    done
}

ssh_msg() {
    echo "Go to ${TEAM} Gerrit (${GTEAM}), sign in, go to settings,
and click on SSH Public Keys. Use Control + Click to open URL.

Click on add SSH Key and copy and paste contents of file from .ssh/id_rsa.pub."
    read -p "Press [Enter] to open file..."
}

sshkey() {
    team
    echo ""
    echo "Your gerrit team is set to: ${bldcya}${TEAM}${txtrst}"
    echo ""
    echo "You will have to set this up for every Team's Gerrit"
    echo "But can use the same sshkeys for all"
    echo ""
    if [ -e ${HOME}/.ssh/id_rsa.pub ]; then
        echo "SSH Key already exists."
        ssh_msg
        gnome-open ${HOME}/.ssh/id_rsa.pub
      else
        ssh-keygen
        ssh_msg
        gnome-open ${HOME}/.ssh/id_rsa.pub
    fi
}

new() {
    curl http:/pac-rom.com/downloads/universal-review > ${GPDIR}/.new
    curl http:/pac-rom.com/downloads/projects > ${GPDIR}/.newproject
    sed -i '12,132d' ${GPDIR}/.new
    NEWB=$(grep BUILD= ${GPDIR}/.new | sed "s/BUILD=//g")
    NEWV=$(grep VERSION= ${GPDIR}/.new | sed "s/VERSION=//g")
}

update_stuff(){
    rm -f ${GPDIR}/universal-review;
    mv ${GPDIR}/.new ${HOME}/bin/universal-review;
    chmod +x ${HOME}/bin/universal-review;
    rm -f ${GPDIR}/teamProjects;
    mv ${GPDIR}/.newproject ${HOME}/bin/teamProjects;
    chmod +x ${HOME}/bin/teamProjects; echo;
    echo "Successfully updated to v${NEWV}!";
}

ask_the_question() {
    do_checks
    if [ ${safety} == "1" ]; then
        while true; do
            read -p "Are you sure you want to update to version: ${NEWV} build: ${NEWB}? (yes/no)" correct4
            case ${correct4} in
                Y*|y*|"") update_stuff; break ;;
                   N*|n*) echo "Update canceled"; break ;;
                      * ) clear; echo "Invalid option ${correct4}, Please try again...";;
            esac
        done
      else
        update_stuff
    fi
}

update() {
    new
    [[ "${BUILD}" == "${NEWB}" ]] && echo "" && echo "Already up to date (v${VERSION})" || ask_the_question
}

uf() {
    new
    mv ${GPDIR}/.new ${HOME}/bin/universal-review
    chmod +x ${HOME}/bin/universal-review
    echo "Forced update to v${NEWV}!"
}

safety() {
    do_checks
    [[ ${safety} == "1" ]] && DisplaySafety="On" || DisplaySafety="Off"
    echo ""
    echo "###################################################################"
    echo ""
    echo "Your Safety is set to: ${bldcya}${DisplaySafety}${txtrst}"
    echo ""
    echo "###################################################################"
    echo ""

    while true; do
        read -p "Would you like to change Safety checks? (y/n): " SAFE
        case ${SAFE} in
            Y*|y*|"") echo "By turning safety off you're taking the risk of messing things up royally";
                      echo "";
                      echo "You do this at your own risk";
                      echo "";
                      echo "Turn ${bldcya}(On)${txtrst} or ${bldred}(Off)${txtrst}?";
                      select safety1 in "On" "Off"; do
                          case ${safety1} in
                              On) save safety 1; break ;;
                             Off) save safety 0; break ;;
                               *) clear; echo "Invalid Entry ${safety1}, Please re-try";;
                          esac
                      done ;;
                   *) echo "Canceled"; break ;;
        esac
    done
}
                        
setup() {
    do_checks
    user
    team
}

error() {
    echo "###################################################################"

    DisplayUser=$(get username) && echo "Your gerrit username is: ${bldcya}${DisplayUser}${txtrst}"
    DisplayCHOICE=$(get teamCHOICE) && echo "Your gerrit team is set to: ${bldcya}${DisplayCHOICE}${txtrst}"
    [[ $(get safety) == "1" ]] && DisplaySafety="On" || DisplaySafety="Off" 
    echo "Your Safety Checks are set to: ${bldcya}${DisplaySafety}${txtrst}"

    echo ${bldylw}"###################################################################"
    sleep 4;
    echo "#                                                                 #"
    echo "# Universal Gerrit Review                                         #"
    echo "#                                                                 #"
    echo "# Created by Sniper/Goldflame09/wedgess/Papa Smurf151/soupmagnet  #"
    echo "#                                                                 #"
    echo "# A PAC-man Project                                               #"
    echo "#                                                                 #"
    echo "###################################################################"${txtrst}
    sleep 3;
    echo ""
    echo ""
    echo "Usage: universal-review [-short command]"
    echo "Or: universal-review [long command]"
    echo ""
    echo ""
    echo "###################################################################"
    echo ""
    echo ${bldred}" COMMANDS: "${txtrst}
    echo
    echo " ${bldcya}setup (-su)${txtrst} --- ${bldylw}Intital Setup${txtrst} "
    echo " ${bldcya}team (-nt)${txtrst} --- ${bldylw}Change Team Gerrits${txtrst} "
    echo " ${bldcya}add+push (-ap)${txtrst} --- ${bldylw}Add and push to gerrit${txtrst} "
    echo " ${bldcya}amend (-am)${txtrst} --- ${bldylw}Amend the commit and push${txtrst} "
    echo " ${bldcya}author (-au)${txtrst} --- ${bldylw}Change author of commit${txtrst} "
    echo " ${bldcya}force (-uf)${txtrst} --- ${bldylw}Force the script to grab a new version${txtrst} "
    echo " ${bldcya}name (-n)${txtrst} --- ${bldylw}View or edit your gerrit username${txtrst} "
    echo " ${bldcya}push (-p)${txtrst} --- ${bldylw}Push to gerrit${txtrst} "
    echo " ${bldcya}sshkey (-ssh)${txtrst} --- ${bldylw}Create/show SSH key to put on Gerrit${txtrst} "
    echo " ${bldcya}safety (-sa)${txtrst} --- ${bldylw}Toggle Safety checks on and off${txtrst} "
    echo " ${bldcya}update (-u)${txtrst} --- ${bldylw}Check for and download an update if available${txtrst} "
    echo
    echo "###################################################################"
    echo
    echo " If you encounter problems, check if:"
    echo " 1. Your gerrit username is correct (using the name option)"
    echo " 2. Your current branch is correct"
    echo " 3. Your public ssh key is attached to your gerrit profile"
    echo
    echo " If you still encounter problems, ask at Universal thread:"
    echo " ${bldcya}http://forum.pac-rom.com${txtrst} . . . Press Control + Click to open URL"
    echo
}

setup
clear

if [ ! -d ${HOME}/bin ]; then
    mkdir -p ${HOME}/bin
    echo "# Add ~/bin to PATH" >> ${HOME}/.bashrc
    echo "export PATH=${PATH}:~/bin" >> ${HOME}/.bashrc
fi

case $1 in
    -n|name)nameq_question;;
    -u|update)update;;
    -p|push)push;;
    -nt|team)new_team;;
    -su|setup)setup;;
    -ssh|sshkey)sshkey;;
    -ap|add+push)ap;;
    -sa|saftey)safety;;
    -am|amend)amend;;
    -uf|force)uf;;
    -h|help|*)error;;
esac
